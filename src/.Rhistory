setwd("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products")
library(RPostgreSQL)
library(DBI)
#----------------------------------------------------------------------------
library(RPostgre)
getSqlConnection <- function(){
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
return(con)
}
test_churn_data <- read.csv("data.csv")
dbWriteTable(con, "test_churn_data", test_churn_data, row.names=FALSE, append=TRUE)
conn <- getSqlConnection()
res <- dbListTables(conn)
dbWriteTable(con, "test_churn_data", test_churn_data, row.names=FALSE, append=TRUE)
con <- dbConnect(RPostgres::Postgres(),
dbname = "postgres",
host="35.190.203.237",
port=5432,
user="student_readonly",
password="Sweg4jihlKnT")
dbWriteTable(con, "test_churn_data", test_churn_data, row.names=FALSE, append=TRUE)
print(res)
# Cancel any existing connections
for(con in all_cons)
+  dbDisconnect(con)
dbExistsTable(conn)
dbExistsTable(con)
getSqlConnection <- function(){
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
return(con)
}
conn <- getSqlConnection()
res <- dbListTables(conn)
print(res)
test_churn_data <- read.csv("data.csv")
dbWriteTable(conn, "test_churn_data", test_churn_data, row.names=FALSE, append=TRUE)
res <- dbListTables(conn)
print(res)
churn_data <- read.csv("data.csv")
dbWriteTable(conn, "churn_data", churn_data, row.names=FALSE, overwrite = TRUE)
res <- dbListTables(conn)
conn <- getSqlConnection()
res <- dbListTables(conn)
print(res)
dbDisconnect(con)
dbDisconnect(conn)
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
#conn <- getSqlConnection()
res <- dbListTables(conn)
print(res)
score <- read.csv("data_to_predict.csv")
score$is_active_member <- factor(score$is_active_member)
score$has_card <- factor(score$has_card)
p <- predict(gbtree, newdata = score, type = "prob")
gbtree <- readRDS("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products/gbtree.RDS")
p <- predict(gbtree, newdata = score, type = "prob")
score$prob <- p
View(score)
E
dbWriteTable(conn, "churn_yesno", score, row.names=FALSE, overwrite = TRUE)
dbWriteTable(conn, "churn_yesno", p, row.names=FALSE, overwrite = TRUE)
dbWriteTable(conn, "churn_yesno", score, row.names=FALSE, overwrite = TRUE)
View(score)
score <- read.csv("data_to_predict.csv")
score$is_active_member <- factor(score$is_active_member)
score$has_card <- factor(score$has_card)
churn_yesno <- cbind(score, p)
View(churn_yesno)
dbWriteTable(conn, "churn_yesno", churn_yesno, row.names=FALSE, overwrite = TRUE)
#conn <- getSqlConnection()
res <- dbListTables(conn)
print(res)
View(test_churn_data)
training <- readRDS("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products/training.RDS")
View(training)
dbDisconnect(conn)
class(churn_yesno$customer_id)
library(dplyr)
p <- p %>%
rename(
no = No,
yes = Yes
)
View(p)
View(score)
churn_yesno <- cbind(score, p)
dbWriteTable(conn, "churn_yesno", churn_yesno, row.names=FALSE, overwrite = TRUE)
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
dbWriteTable(conn, "churn_yesno", churn_yesno, row.names=FALSE, overwrite = TRUE)
dbDisconnect(conn)
View(churn_yesno)
shiny::runApp('ChurnApp/testt')
install.packages("shinyWidgets")
runApp('ChurnApp/testt')
runApp('ChurnApp/testt')
dbGetQuery(conn, paste0("SELECT * FROM churn_yesno WHERE customer_id = 15815630 "))
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
dbGetQuery(conn, paste0("SELECT * FROM churn_yesno WHERE customer_id = 15815630 "))
install.packages("cronR")
library(cronR)
runApp('ChurnApp/test_local/test_local')
library(cronR)
print(res)
#conn <- getSqlConnection()
res <- dbListTables(conn)
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
#conn <- getSqlConnection()
res <- dbListTables(conn)
print(res)
View(churn_data)
View(churn_data)
churn_data[1:11,]
churn_data[,1:11]
dbWriteTable(conn, "customer_data", churn_data[,1:11], row.names=FALSE, overwrite = TRUE)
dbGetQuery(conn, "SELECT COUNT(customer_id) FROM customer_data")
library(cronR)
f <- system.file(package = "cronR", "extdata", "process_new_data.R")
cmd <- cron_rscript(f)
f <- system.file("process_new_data.R") #package = "cronR", "extdata",
cmd <- cron_rscript(f)
view(f)
cmd <- cron_rscript("process_new_data.R")
setwd("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products/ChurnApp/test_local/test_local")
cmd <- cron_rscript("process_new_data.R")
cron_add(command = cmd, frequency = "minutely", id="test_1", description = "Just a testing Script")
cron_ls()
dbGetQuery(conn, "SELECT COUNT(customer_id) FROM customer_data")
dbGetQuery(conn, "SELECT COUNT(customer_id) FROM customer_data")
cron_clear()
#pull new data of the last 24 hours
new_add <- data.frame(dbGetQuery(conn, "SELECT * FROm raw_customer_data WHERE created_at >= NOW() - '1 day'::INTERVAL"))
#remove timestamp
new_add <- new_add %>%
subset(select = -c(created_at))
View(new_add)
#pass to back end model
renderTable({
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
result <- fromJSON(content(r, "text"))
})
#pass to back end model
output$text <- renderTable({
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
result <- fromJSON(content(r, "text"))
})
#pass to back end model
text <- renderTable({
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
result <- fromJSON(content(r, "text"))
})
new_processed_customer_data <- cbind(new_add, result)
cmd <- cron_rscript("process_new_data.R")
cron_add(command = cmd, frequency = "minutely", id="test_1", description = "Just a testing Script")
dbGetQuery(conn, "SELECT COUNT(customer_id) FROM customer_data")
dbGetQuery(conn, "SELECT COUNT(customer_id) FROM customer_data")
cron_clear()
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
zero_one <-
function(x) {
# To convert a Logic input to 1 (if TRUE) or 0 (if FALSE)
if (x == TRUE) {
return(x = 1)
} else {
return(x = 0)
}
}
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = zero_one(new_add$has_card),
is_active_member = zero_one(new_add$is_active_member),
est_salary = new_add$est_salary
),
verbose()
)
r <- httr::GET(
url = paste0("http://127.0.0.1:8080/__swagger__/"),
path = "credit_predict",
query = list(
credit_score = new_add$credit_score,
geo_location = new_add$geo_location,
gender = new_add$gender,
age = new_add$age,
tenure = new_add$tenure,
balance = new_add$balance,
num_products = new_add$num_products,
has_card = new_add$has_card,
is_active_member = new_add$is_active_member,
est_salary = new_add$est_salary
),
verbose()
)
df <- data.frame("cl1" = c(1, 1, 2, 3), "cl2" = c("w", "e", "wre", "r"))
write_csv(df, "df.csv")
cmd1 <- cron_rscript("writecsv.R")
cron_add(command = cmd1, frequency = "minutely", id="test_1", description = "Just a testing Script")
cron_clear()
df
write_csv(df, "df.csv")
library(plumber)
r <- plumb("plumber.R")
r$run(port=8080, host="0.0.0.0", swagger=TRUE)
setwd("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products")
r <- plumb("plumber.R")
r$run(port=8080, host="0.0.0.0", swagger=TRUE)
library(readr)
model <- read_rds("/src/gbtree.rds")
model <- read_rds("/back_end/src/gbtree.rds")
model <- read_rds("back_end/src/gbtree.rds")
plumb(file='back_end/src/create_api.R')$run()
plumb(file='back_end/src/create_api.R')$run()
install.packages("shinythemes")
install.packages("shinythemes")
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
ibrary(tidyverse)
library(httr)
library(RPostgres)
library(RPostgreSQL)
library(DBI)
library(dplyr)
conn <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
dbGetQuery(conn, "SELECT * FROM churn_yesno LIMIT 10")
super_model <- readr::read_rds("src/gbtree.rds")
setwd("~/OneDrive/Documents/Course/UZH/Fall 2020/Prototyping Data Science Products/back_end/src")
super_model <- readr::read_rds("src/gbtree.rds")
super_model <- readr::read_rds("gbtree.rds")
dbDisconnect(conn)
get_query <- 15585768
conn <- DBI::dbConnect(
drv,
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
drv <- dbDriver("PostgreSQL")
conn <- DBI::dbConnect(
drv,
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
#get_query <- as.numeric(input$get_query)
request_df <- dbGetQuery(conn, paste0("SELECT * FROM churn_yesno WHERE customer_id = '", get_query ,"'"))
request_df
conn <- dbConnect(
drv,
dbname = "postgres",
host = "34.76.144.177",
port = 5432,
user = "postgres",
password = "yJKLI8gyEkGgJ71I")
IdPlusOne <- sum(dbGetQuery(conn, "SELECT MAX(customer_id) FROM churn_yesno"), 1)
IdPlusOne
